import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.15'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'
apply from: "https://raw.githubusercontent.com/UltrusBot/GradleScripts/${project.upload_script_version}/release.gradle"

jarJar.enable()
archivesBaseName = "${mod_name}-forge-${minecraft_version}"



repositories {
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}
minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}-1.20.1-forge")
    jarJar(group: 'maven.modrinth', name: "codAaoxh", version: '[1.4.1-forge,)') {
        jarJar.pin(it, "${project.midnightlib_version}-forge")
    }
    implementation fg.deobf("maven.modrinth:midnightlib:${project.midnightlib_version}-forge")

}

tasks.build.dependsOn tasks.jarJar

tasks.jarJar.archiveClassifier.set("");
reobf {
    jarJar {}
}
tasks.jarJar.finalizedBy("reobfJarJar")
tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}


var mod = createModReleaseMetadata(
        "Size Shifting Potions v${project.version} Forge",
        file("$rootDir/CHANGELOG.md"),
        ["1.20.1"],
        ["forge"],
        "jar",
        ["sourcesJar"],
        "v${project.version}-forge",
        false
)
modrinthInfo(mod, "sizeshiftingpotions", ["pehkui"], [], [], ["midnightlib"])
githubInfo(mod, "UltrusBot", "SizeShiftingPotions", "1.20")
curseforgeInfo(mod, TaskPublishCurseForge, "447440", ["midnightlib"], ["pehkui"])

task releaseUpdate() {
    dependsOn githubRelease
    dependsOn modrinth
    dependsOn publishCurseForge
}
processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${mod_id}."
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.forge.mixins.json"
    config "${mod_id}.mixins.json"
}
jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
