buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

repositories {
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}
minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}-1.19-forge")
    jarJar(group: 'eu.midnightdust.midnightlib', name: "MidnightLib", version: '[1.0.0)') {
        jarJar.pin(it, project.midnightlib_version)
    }
    implementation fg.deobf("maven.modrinth:midnightlib:${project.midnightlib_version}-forge")

}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}
githubRelease {
    if (System.getenv("GH_TOKEN") != null) {
        authorization = "Token ${System.getenv("GH_TOKEN")}"
    }
    owner = "UltrusBot"
    repo = "SizeShiftingPotions"
    targetCommitish = "1.19.2"
    tagName = "v${project.version}-forge"
    releaseName = "Size Shifting Potions v${project.version}-Forge"
    body = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
    releaseAssets = [jar, sourcesJar, javadocJar]
}
modrinth {
    if (System.getenv("MODRINTH_TOKEN") != null) {
        token = System.getenv("MODRINTH_TOKEN")
    }
    projectId = "sizeshiftingpotions"
    versionType = "release"
    uploadFile = jar
    changelog = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
    versionNumber ="v${project.version}"
    versionName = "Size Shifting Potions v${project.version} Forge"
    gameVersions = ["1.19.2"]
    loaders = ["forge"]
    dependencies {
        embedded.project "midnightlib"
    }
    syncBodyFrom = rootProject.file("README.md").text
}
curseforge {
    if (System.getenv("CF_API_KEY") != null) {
        apiKey = System.getenv("CF_API_KEY")

    }
    project {
        id = "447440"
        changelogType = "markdown"
        changelog = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
        releaseType = "release"
        addGameVersion "1.19.2"
        addGameVersion "Forge"
        mainArtifact(jar) {
            displayName = "Size Shifting Potions v${project.version} Forge"

        }
        relations {
            embeddedLibrary "midnightlib"
        }
    }
}

task releaseUpdate() {
    dependsOn githubRelease
    dependsOn modrinth
    dependsOn curseforge
}
processResources {
    from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
